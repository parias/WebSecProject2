/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package websecurityshopping;

import java.awt.TextField;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.Date;


/**
 *
 * @author gregsimpson
 */
public class NewUserForm extends javax.swing.JPanel {

    String dbURL = "jdbc:mysql://gregandpablo.ncat.edu:3306/products";
    private String customerDB =  "jdbc:mysql://gregandpablo.ncat.edu:3306/customers";
    String dbUserName = "root";
    private String dbPassword = "";

    private DatabaseInteraction ru;// = new DatabaseInteraction(customerDB, dbUserName, dbPassword);
    private Statement stmt = null;
    private User user;
    
    ShoppingJApplet applet;
    
    /**
     * Creates new form NewUserForm
     */
    public NewUserForm() {
        ru = new DatabaseInteraction(customerDB, dbUserName, dbPassword);
        initComponents();
    }

    public NewUserForm(ShoppingJApplet applet) {
        ru = new DatabaseInteraction(customerDB, dbUserName, dbPassword);
        initComponents();
        this.applet = applet;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        monthComboBox = new javax.swing.JComboBox();
        emailLabel = new java.awt.Label();
        monthExpirationLabel = new javax.swing.JLabel();
        passwordTextField = new java.awt.TextField();
        yearExpirationLabel = new javax.swing.JLabel();
        creditCardNumber = new java.awt.Label();
        yearExpirationTextField = new java.awt.TextField();
        creditCardTextField = new java.awt.TextField();
        expirationLabel = new java.awt.Label();
        addressLabel = new java.awt.Label();
        addressTextField = new java.awt.TextField();
        firstNameLabel = new java.awt.Label();
        submitBtn = new java.awt.Button();
        firstNameTextField = new java.awt.TextField();
        passwordLabel1 = new java.awt.Label();
        lastNameLabel = new java.awt.Label();
        emailTextField = new java.awt.TextField();
        lastNameTextField = new java.awt.TextField();

        monthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        emailLabel.setText("Email: ");

        monthExpirationLabel.setText("Month");

        passwordTextField.setName("         "); // NOI18N

        yearExpirationLabel.setText("Year");

        creditCardNumber.setText("Credit Card Number:");

        creditCardTextField.setName("         "); // NOI18N

        expirationLabel.setText("Expiration Date:");

        addressLabel.setText("Address:");

        addressTextField.setName("         "); // NOI18N

        firstNameLabel.setText("First Name");

        submitBtn.setLabel("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        firstNameTextField.setName("         "); // NOI18N

        passwordLabel1.setText("Password: ");

        lastNameLabel.setText("Last Name:");

        emailTextField.setName("         "); // NOI18N

        lastNameTextField.setName("         "); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(creditCardTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(monthExpirationLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(yearExpirationLabel)
                            .addComponent(yearExpirationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(creditCardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(expirationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(creditCardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(creditCardTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(expirationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(monthExpirationLabel)
                            .addComponent(yearExpirationLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(yearExpirationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

        private boolean validateString(String s, TextField field) {
        char[] chars = s.toCharArray();

        for (char c : chars) {
            if (!Character.isLetter(c)) {

                //resets focus to appropriate field for re-Input
                field.requestFocus();
                return false;
            }
        }
        return true;
    }

    /*
     * Validates Year for Credit Card Expiration
     */
    private boolean validateYear() {
        String year = yearExpirationTextField.getText();
        char[] chars = year.toCharArray();

        //validates for if input are all integers
        for (char c : chars) {
            if (!Character.isDigit(c)) {
                yearExpirationTextField.requestFocus();
                return false;
            }

        }

        //Validates for if expiration date is reasonable, betweem Current Year and 2050
        int yearInteger = Integer.parseInt(year);
        System.out.println(Calendar.getInstance().get(Calendar.YEAR));
        if (yearInteger < Calendar.getInstance().get(Calendar.YEAR) || yearInteger > 2050) {
            return false;
        } else {
            return true;
        }
    }

    /*
     * Input Validation for all fields and Message Dialog for User Notifiaction
     */
    private boolean validateAll() {
        if (!validateString(lastNameTextField.getText(), lastNameTextField)) {
            JOptionPane.showMessageDialog(null, "Last Name must contain all letters");
            return false;
        } else if (!validateString(firstNameTextField.getText(), firstNameTextField)) {
            JOptionPane.showMessageDialog(null, "First Name must contain all letters");
            return false;
        } else if (!validateYear()) {
            JOptionPane.showMessageDialog(null, "Enter a year between "  + Calendar.getInstance().get(Calendar.YEAR) +   " and 2050");
            return false;
        } else if (emailTextField.getText() == null) {
            JOptionPane.showMessageDialog(null, "Email cannot be null");
            return false;
        } else if (!validateCreditCard()) {
            JOptionPane.showMessageDialog(null, "Credit Card Must Contain all Numbers");
            return false;
        } else if (creditCardTextField.getText().length() != 16) {  //Credit card must be 16 Digits
            JOptionPane.showMessageDialog(null, "Credit Card must contain 16 digits");
            return false;
        }
        return true;
    }

    /*
     * Validates Credit Card Information
     */
    private boolean validateCreditCard() {
        String creditCard = creditCardTextField.getText();
        char[] chars = creditCard.toCharArray();

        //Validates if CC Info is all digits
        for (char c : chars) {
            if (!Character.isDigit(c)) {
                creditCardTextField.requestFocus();
                return false;
            }
        }
        return true;
    }

    private void getCustomerID() {
        System.out.println(emailTextField.getText());

        //MySql sql statement to query database
        
        //String sql = "SELECT * FROM `customer` WHERE `email` = '" + emailTextField.getText() + "';";
        try {
            ResultSet rs = ru.getCustomerID(emailTextField.getText());// stmt.executeQuery(sql);
            while (rs.next()) {
                int ID = rs.getInt("customerID");
                user.setCustomerID(ID);
            }
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseInteraction.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed

        //connection to Database
        //connect();

        /*
        * Determines if another User in Database with same Email.
        * User Needs Unique Email for login
        */
        int duplicatEntry = -1;
        //String sql = "SELECT * FROM `customer` WHERE `email` = '" + emailTextField.getText() + "';";
        try {
            ResultSet rs = ru.getCustomerID(emailTextField.getText()); //stmt.executeQuery(sql);
            if(rs != null){
                while (rs.next()) {
                    duplicatEntry = rs.getInt("customerID");
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(DatabaseInteraction.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO: Get rid of jump
        nouser:
        //Creates new user if no Duplicate Email
        if (duplicatEntry == -1) {

            SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");

            //variables from TextFields from GUI
            String firstName = firstNameTextField.getText();
            String lastName = lastNameTextField.getText();
            String email = emailTextField.getText();
            String password = passwordTextField.getText();
            String creditCardNumber = creditCardTextField.getText();
            String address = addressTextField.getText();

            //Credit Card Expiration Information
            int dayExpiration = 01;
            int monthExpiration = Integer.parseInt(monthComboBox.getSelectedItem().toString());
            int yearExpiration = -1;
            //Input Validation for Year
            try {
                yearExpiration = Integer.parseInt(yearExpirationTextField.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Year must contain all Digits");
                yearExpirationTextField.requestFocus();
            }

            if (validateAll()) {

                //Creates Date object with user specified information
                Date dateExpiration = new Date(yearExpiration, monthExpiration, dayExpiration);

                //Creates User with limited information to be passed to Shopping Frame
                //user = new User(firstName, lastName, creditCardNumber, dateExpiration);
                user = new User(firstName, lastName, creditCardNumber, dateExpiration, address, password, email);

                String date = yearExpiration + "-" + monthExpiration + "-" + "01";

                //MySql sql statement to input new User into Database
                /*
                sql = "INSERT INTO `customers`.`customer` (`customerID`, `firstName`, `lastName`, "
                + "`creditCard`, `ccExpiration`, `address`, `email`, `password`) VALUES (NULL, '"
                + firstName + "', '" + lastName + "', '" + creditCardNumber + "', '" + date + "', '"
                + address + "','" + email + "', '" + password + "');";
                */
                ru.addNewUser(user, date);
                //Executes MySql sql statement
                //try {
                    //stmt.executeUpdate(sql);
                    JOptionPane.showMessageDialog(null, "Thank you for Registering");
                    getCustomerID();
                    applet.makeShoppingFrame(user);
                    applet.showShoppingFrame();
                    //new ShoppingFrame(user).setVisible(true);

                    //exception handling for MySql Errors
                    /*
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                    Logger.getLogger(NewUserForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(NewUserForm.class.getName()).log(Level.SEVERE, null, ex);
                } */
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please register with another email.");
        }
    }//GEN-LAST:event_submitBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label addressLabel;
    private java.awt.TextField addressTextField;
    private java.awt.Label creditCardNumber;
    private java.awt.TextField creditCardTextField;
    private java.awt.Label emailLabel;
    private java.awt.TextField emailTextField;
    private java.awt.Label expirationLabel;
    private java.awt.Label firstNameLabel;
    private java.awt.TextField firstNameTextField;
    private java.awt.Label lastNameLabel;
    private java.awt.TextField lastNameTextField;
    private javax.swing.JComboBox monthComboBox;
    private javax.swing.JLabel monthExpirationLabel;
    private java.awt.Label passwordLabel1;
    private java.awt.TextField passwordTextField;
    private java.awt.Button submitBtn;
    private javax.swing.JLabel yearExpirationLabel;
    private java.awt.TextField yearExpirationTextField;
    // End of variables declaration//GEN-END:variables
}
